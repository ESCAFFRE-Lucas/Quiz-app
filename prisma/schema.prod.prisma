generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  totalQuizzes  Int       @default(0)
  totalPoints   Int       @default(0)

  attempts QuizAttempt[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizAttempt {
  id             String   @id @default(cuid())
  userId         String
  categoryId     Int
  categoryName   String
  score          Int
  totalQuestions Int
  completedAt    DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id            String  @id @default(cuid())
  attemptId     String
  questionText  String
  userAnswer    String
  correctAnswer String
  isCorrect     Boolean

  attempt QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}
